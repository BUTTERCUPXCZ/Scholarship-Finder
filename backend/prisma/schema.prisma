generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String              @id @default(uuid()) @db.Uuid
  fullname             String
  email                String              @unique
  password             String
  role                 Role                @default(STUDENT)
  isVerified           Boolean             @default(false)
  applications         Application[]
  archivedScholarships Archive[]           @relation("ArchivedScholarships")
  scholarships         Scholarship[]       @relation("ScholarshipOrg")
  notifications        Notification[]
  VerificationToken    VerificationToken[]

  @@index([email])
}

model VerificationToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model Scholarship {
  id           String            @id @default(uuid()) @db.Uuid
  title        String
  description  String
  providerId   String            @db.Uuid
  deadline     DateTime
  location     String
  type         String
  benefits     String
  requirements String
  status       ScholarshipStatus @default(ACTIVE)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  applications Application[]
  provider     User              @relation("ScholarshipOrg", fields: [providerId], references: [id])

  @@index([status, deadline])
  @@index([deadline, status])
  @@index([createdAt])
  @@index([providerId, status])
  @@index([status])
}

model Application {
  id            String                @id @default(uuid()) @db.Uuid
  userId        String                @db.Uuid
  scholarshipId String                @db.Uuid
  status        ApplicationStatus     @default(PENDING)
  submittedAt   DateTime              @default(now())
  Address       String
  City          String
  Email         String
  Firstname     String
  Lastname      String
  Middlename    String
  Phone         String
  scholarship   Scholarship           @relation(fields: [scholarshipId], references: [id])
  user          User                  @relation(fields: [userId], references: [id])
  documents     ApplicationDocument[]

  @@index([scholarshipId])
  @@index([userId])
}

model ApplicationDocument {
  id            String      @id @default(uuid()) @db.Uuid
  applicationId String      @db.Uuid
  filename      String
  contentType   String
  size          Int
  fileUrl       String
  storagePath   String
  uploadedAt    DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id])

  @@index([applicationId])
}

model Archive {
  id                String            @id @default(uuid()) @db.Uuid
  scholarshipId     String            @unique @db.Uuid
  title             String
  description       String
  providerId        String            @db.Uuid
  deadline          DateTime
  location          String
  type              String
  benefits          String
  requirements      String
  originalStatus    ScholarshipStatus
  archivedAt        DateTime          @default(now())
  archivedBy        String            @db.Uuid
  originalCreatedAt DateTime
  originalUpdatedAt DateTime
  provider          User              @relation("ArchivedScholarships", fields: [providerId], references: [id])

  @@index([providerId])
  @@index([archivedAt])
}

model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  userId    String           @db.Uuid
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

enum Role {
  STUDENT
  ORGANIZATION
  ADMIN
}

enum ScholarshipStatus {
  ACTIVE
  EXPIRED
}

enum ApplicationStatus {
  PENDING
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}

enum NotificationType {
  INFO
  SCHOLARSHIP_ACCEPTED
  SCHOLARSHIP_REJECTED
  SCHOLARSHIP_UPDATE
}
